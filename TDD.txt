1. Именование тестов
2. Структура тестов (3 блока)
3. Структура требований (4 квадрата)
4. Представление об объемах и трудностях тестирования
5. Пермутайшен тестинг
6. Зависимость жизненного цикла от денег(фокус внимания на важные и часто меняющиеся модули)

1. Применение к С++. Неприменим инструментарий
2. Отсутствие теста, например, на уровне системы проверить утечки памяти

1. Внутренние требования к качеству (согласование требование чему отдать приоритет: гибкость, простота)
2. Структура и именование тестов
3. Поискать наличие аналогичного инстрементария для С++

Тест дублёры
[state based]
dummy - пустышка
stub - заглушка (минимум поведения)
fake -  - (мимикрирует под объект)[если DB, то замена на какую-то более "лёгкую"]
[interaction based]
mock - (был ли вызван метод, сколько раз, какие данные передал)

spy - гибрид-прокси

---
Полное покрытие кода, без избыточности.
Каждая строчка кода соответствует одному тесту.

Имена тест сюитов и самих тестов, и выводимые ими сообщения позволяют однозначно идентифицировать место и причину дефекта, без необходимости анализировать код тестов или тестируемого ПО.
Сценарий должен точно идентифицироваться.
Предлагать возможный вариант исправления.

Простой выбор функциональной ветки для тестирования (выбор сценариев).

Чтобы тест давал на ответ на вопрос, почему так работает продукт.

Тест должно быть легко читать (должен быть ясным, что мы проверяем этим кодом).
Тесты должны быть быстрыми. Максимально быстрая обратная связь.
---
Неразрешимые конфликты
Схема от кода до Бога
BDD - как на родном языке, для аналитиков
Различие между dummy, mock, stub, spy - тестовые дублёры

Не хватает C++

Нарушение коммуницаций - если есть проблемы в компании, у них есть конкретные причины.
Нарушение работы имеют свои причины. В них могут входить нарушение коммуникации, схема оплаты, структура команды.

Более ясное представление о работе вышележащих слоёв (становится их жалко). Понимание работы бизнеса в целом.
Стимул для коммуникаций.

Тесты - Система, куда вкладываться и какой баланс.
---
Экономическая задача - время и деньги.
---
Стараемся делать качественный продукт
Стараемся подходить профессионально
Надёжность
Соответствие
Корректность
Есть люди с высокой культурой и самоорганизацией

Слишком много сконцентрированно в одном человеке
Нет информации, приходится бегать и собирать
Недостаточно глубоко прорабатываем решения, недостаточно глубоко тестируем
Слабая связь с ПМ, ПрМ, нет общего видения, куда и зачем движемся
---
Refactoring должен быть обоснован
5 почему - ответ всегда есть
Программирование с конца (Test, Assert first)
Code Smell
Соответствие культур (группа, штаб, компания)
Окусировка - приоритет, фокус (то, что важно бизнесу)
---